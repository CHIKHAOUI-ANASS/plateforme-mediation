package com.mediation.platform.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    @Value("${app.email.from:noreply@mediation-platform.com}")
    private String fromEmail;

    /**
     * Envoyer un email de bienvenue
     */
    public void envoyerEmailBienvenue(String destinataire, String nom) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Bienvenue sur la plateforme de m√©diation");
        message.setText("Bonjour " + nom + ",\n\n" +
                "Bienvenue sur notre plateforme de m√©diation entre donateurs et associations caritatives.\n" +
                "Votre compte a √©t√© cr√©√© avec succ√®s.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de bienvenue: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de validation d'association
     */
    public void envoyerEmailValidationAssociation(String destinataire, String nomAssociation) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Validation de votre association");
        message.setText("Bonjour,\n\n" +
                "Votre association '" + nomAssociation + "' a √©t√© valid√©e avec succ√®s.\n" +
                "Vous pouvez maintenant cr√©er des projets et recevoir des dons.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de validation: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email pour un don re√ßu
     */
    public void envoyerEmailDonRecu(String destinataire, String nomDonateur, String montant, String nomProjet) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Nouveau don re√ßu");
        message.setText("Bonjour,\n\n" +
                "Vous avez re√ßu un nouveau don de " + montant + " DH de " + nomDonateur +
                " pour votre projet '" + nomProjet + "'.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de don re√ßu: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email pour un don valid√©
     */
    public void envoyerEmailDonValide(String destinataire, String nomProjet, String montant) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Don valid√©");
        message.setText("Bonjour,\n\n" +
                "Votre don de " + montant + " DH pour le projet '" + nomProjet + "' a √©t√© valid√©.\n" +
                "Merci pour votre g√©n√©rosit√© !\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de don valid√©: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email pour un projet compl√©t√©
     */
    public void envoyerEmailProjetComplete(String destinataire, String nomProjet) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Projet compl√©t√©");
        message.setText("F√©licitations !\n\n" +
                "Votre projet '" + nomProjet + "' a atteint son objectif financier.\n" +
                "Merci √† tous les donateurs qui ont contribu√© √† ce succ√®s.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de projet compl√©t√©: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de r√©initialisation de mot de passe
     */
    public void envoyerEmailResetMotDePasse(String destinataire, String nouveauMotDePasse) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("R√©initialisation de mot de passe");
        message.setText("Bonjour,\n\n" +
                "Votre mot de passe a √©t√© r√©initialis√©.\n" +
                "Votre nouveau mot de passe temporaire est : " + nouveauMotDePasse + "\n" +
                "Veuillez le changer d√®s votre prochaine connexion.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de reset: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email pour une notification urgente
     * (M√©thode ajout√©e pour le NotificationService)
     */
    public void envoyerEmailNotificationUrgente(String destinataire, String nom, String titre, String message) {
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setFrom(fromEmail);
        mailMessage.setTo(destinataire);
        mailMessage.setSubject("üö® URGENT - " + titre);
        mailMessage.setText("Bonjour " + nom + ",\n\n" +
                "Vous avez re√ßu une notification urgente :\n\n" +
                "üìã " + titre + "\n" +
                "üí¨ " + (message != null ? message : "Aucun d√©tail suppl√©mentaire") + "\n\n" +
                "‚ö†Ô∏è Cette notification n√©cessite votre attention imm√©diate.\n" +
                "Veuillez vous connecter √† la plateforme pour plus de d√©tails.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(mailMessage);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email urgent: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de refus d'association
     */
    public void envoyerEmailRefusAssociation(String destinataire, String nomAssociation, String motif) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("Demande d'association refus√©e");
        message.setText("Bonjour,\n\n" +
                "Nous regrettons de vous informer que votre demande d'association '" + nomAssociation +
                "' a √©t√© refus√©e.\n\n" +
                "Motif : " + (motif != null ? motif : "Non sp√©cifi√©") + "\n\n" +
                "Vous pouvez contacter notre √©quipe pour obtenir plus d'informations ou " +
                "soumettre une nouvelle demande apr√®s avoir corrig√© les points mentionn√©s.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de refus: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de rappel d'√©ch√©ance de projet
     */
    public void envoyerEmailRappelEcheance(String destinataire, String nomProjet, int joursRestants, double progres) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("‚è∞ Rappel : √âch√©ance proche pour votre projet");
        message.setText("Bonjour,\n\n" +
                "Nous vous rappelons que votre projet '" + nomProjet +
                "' arrive √† √©ch√©ance dans " + joursRestants + " jour(s).\n\n" +
                "üìä Progression actuelle : " + String.format("%.1f", progres) + "%\n\n" +
                "N'h√©sitez pas √† promouvoir votre projet pour atteindre votre objectif !\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de rappel: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de rapport mensuel/hebdomadaire
     */
    public void envoyerEmailRapport(String destinataire, String nom, String typeRapport, String contenuRapport) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("üìä Votre rapport " + typeRapport + " est disponible");
        message.setText("Bonjour " + nom + ",\n\n" +
                "Votre rapport " + typeRapport + " est maintenant disponible.\n\n" +
                "üìà R√©sum√© :\n" + contenuRapport + "\n\n" +
                "Connectez-vous √† votre espace pour consulter le rapport d√©taill√©.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de rapport: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email de maintenance programm√©e
     */
    public void envoyerEmailMaintenance(String destinataire, String nom, String dateDebut, String dureeEstimee, String details) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject("üîß Maintenance programm√©e de la plateforme");
        message.setText("Bonjour " + nom + ",\n\n" +
                "Nous vous informons qu'une maintenance de notre plateforme est programm√©e :\n\n" +
                "üìÖ Date et heure : " + dateDebut + "\n" +
                "‚è±Ô∏è Dur√©e estim√©e : " + dureeEstimee + "\n" +
                "üîß D√©tails : " + details + "\n\n" +
                "Durant cette p√©riode, la plateforme pourra √™tre temporairement inaccessible.\n" +
                "Nous nous excusons pour la g√™ne occasionn√©e.\n\n" +
                "Cordialement,\nL'√©quipe de la plateforme");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de maintenance: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email personnalis√© (m√©thode g√©n√©rique)
     */
    public void envoyerEmailPersonnalise(String destinataire, String sujet, String contenu) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject(sujet);
        message.setText(contenu);

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email personnalis√©: " + e.getMessage());
        }
    }

    /**
     * Envoyer un email √† plusieurs destinataires
     */
    public void envoyerEmailGroupe(String[] destinataires, String sujet, String contenu) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataires);
        message.setSubject(sujet);
        message.setText(contenu);

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email de groupe: " + e.getMessage());
        }
    }

    /**
     * V√©rifier la configuration email
     */
    public boolean verifierConfiguration() {
        try {
            SimpleMailMessage testMessage = new SimpleMailMessage();
            testMessage.setFrom(fromEmail);
            testMessage.setTo(fromEmail); // Envoie √† soi-m√™me pour test
            testMessage.setSubject("Test de configuration email");
            testMessage.setText("Ceci est un test de configuration email.");

            mailSender.send(testMessage);
            return true;
        } catch (Exception e) {
            System.err.println("Erreur de configuration email: " + e.getMessage());
            return false;
        }
    }

    /**
     * Obtenir les informations de configuration
     */
    public String getFromEmail() {
        return fromEmail;
    }

    /**
     * Envoyer un email avec accus√© de r√©ception (si support√©)
     */
    public void envoyerEmailAvecAccuse(String destinataire, String sujet, String contenu) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(destinataire);
        message.setSubject(sujet);
        message.setText(contenu + "\n\n---\nCet email a √©t√© envoy√© automatiquement par la plateforme de m√©diation.");

        try {
            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Erreur lors de l'envoi de l'email avec accus√©: " + e.getMessage());
        }
    }
}