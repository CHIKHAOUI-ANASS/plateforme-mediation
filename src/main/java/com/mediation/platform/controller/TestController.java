package com.mediation.platform.controller;

import com.mediation.platform.dto.response.ApiResponse;
import com.mediation.platform.entity.Utilisateur;
import com.mediation.platform.enums.RoleUtilisateur;
import com.mediation.platform.enums.StatutUtilisateur;
import com.mediation.platform.repository.UtilisateurRepository;
import com.mediation.platform.service.DataSeeder;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/test")
@CrossOrigin(origins = "*", maxAge = 3600)
@Tag(name = "Test", description = "Endpoints de test et de diagnostic")
public class TestController {

    @Autowired
    private UtilisateurRepository utilisateurRepository;

    @Autowired
    private DataSeeder dataSeeder;

    /**
     * Test de base - v√©rifier que l'API fonctionne
     */
    @GetMapping("/ping")
    @Operation(summary = "Test de connectivit√©", description = "V√©rifie que l'API r√©pond correctement")
    public ResponseEntity<?> ping() {
        return ResponseEntity.ok(ApiResponse.success("Pong! API fonctionne correctement ‚úÖ", "OK"));
    }

    /**
     * Test de la base de donn√©es
     */
    @GetMapping("/database")
    @Operation(summary = "Test base de donn√©es", description = "V√©rifie la connexion √† la base de donn√©es")
    public ResponseEntity<?> testDatabase() {
        try {
            long nombreUtilisateurs = utilisateurRepository.count();

            Map<String, Object> info = new HashMap<>();
            info.put("status", "‚úÖ Connexion BD OK");
            info.put("nombreUtilisateurs", nombreUtilisateurs);
            info.put("timestamp", java.time.LocalDateTime.now());

            return ResponseEntity.ok(ApiResponse.success("Base de donn√©es accessible", info));
        } catch (Exception e) {
            Map<String, Object> error = new HashMap<>();
            error.put("status", "‚ùå Erreur BD");
            error.put("error", e.getMessage());

            return ResponseEntity.ok(ApiResponse.error("Erreur base de donn√©es", error));
        }
    }

    /**
     * Cr√©er des donn√©es de test
     */
    @PostMapping("/seed-data")
    @Operation(summary = "Cr√©er donn√©es de test", description = "Ins√®re des donn√©es de test dans la base")
    public ResponseEntity<?> createTestData() {
        try {
            dataSeeder.createTestData();
            return ResponseEntity.ok(ApiResponse.success("Donn√©es de test cr√©√©es avec succ√®s! Consultez les logs pour les comptes cr√©√©s.", "SUCCESS"));
        } catch (Exception e) {
            return ResponseEntity.ok(ApiResponse.error("Erreur cr√©ation donn√©es test: " + e.getMessage()));
        }
    }

    /**
     * Supprimer les donn√©es de test
     */
    @DeleteMapping("/clear-data")
    @Operation(summary = "Supprimer donn√©es test", description = "Supprime toutes les donn√©es de test")
    public ResponseEntity<?> clearTestData() {
        try {
            dataSeeder.clearTestData();
            return ResponseEntity.ok(ApiResponse.success("Donn√©es de test supprim√©es avec succ√®s", "SUCCESS"));
        } catch (Exception e) {
            return ResponseEntity.ok(ApiResponse.error("Erreur suppression donn√©es test: " + e.getMessage()));
        }
    }

    /**
     * Statistiques des donn√©es de test
     */
    @GetMapping("/data-stats")
    @Operation(summary = "Stats donn√©es test", description = "Affiche les statistiques des donn√©es de test")
    public ResponseEntity<?> getDataStats() {
        try {
            String stats = dataSeeder.getTestDataStats();
            return ResponseEntity.ok(ApiResponse.success("Statistiques r√©cup√©r√©es", stats));
        } catch (Exception e) {
            return ResponseEntity.ok(ApiResponse.error("Erreur r√©cup√©ration stats: " + e.getMessage()));
        }
    }

    /**
     * Lister tous les utilisateurs (pour debug)
     */
    @GetMapping("/users")
    @Operation(summary = "Lister utilisateurs", description = "Liste tous les utilisateurs (debug uniquement)")
    public ResponseEntity<?> getAllUsers() {
        try {
            List<Utilisateur> utilisateurs = utilisateurRepository.findAll();
            return ResponseEntity.ok(ApiResponse.success("Utilisateurs r√©cup√©r√©s", utilisateurs));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("Erreur r√©cup√©ration utilisateurs: " + e.getMessage()));
        }
    }

    /**
     * Informations sur l'application
     */
    @GetMapping("/info")
    @Operation(summary = "Informations syst√®me", description = "Retourne les informations sur l'application")
    public ResponseEntity<?> getSystemInfo() {
        Map<String, Object> info = new HashMap<>();
        info.put("application", "Plateforme de M√©diation");
        info.put("version", "1.0.0");
        info.put("environment", "development");
        info.put("timestamp", java.time.LocalDateTime.now());
        info.put("javaVersion", System.getProperty("java.version"));
        info.put("springBootVersion", "3.0.6");

        return ResponseEntity.ok(ApiResponse.success("Informations syst√®me", info));
    }

    /**
     * Test des r√¥les et statuts (√©num√©rations)
     */
    @GetMapping("/enums")
    @Operation(summary = "Test √©num√©rations", description = "Liste les valeurs des √©num√©rations")
    public ResponseEntity<?> getEnums() {
        Map<String, Object> enums = new HashMap<>();

        Map<String, String> roles = new HashMap<>();
        for (RoleUtilisateur role : RoleUtilisateur.values()) {
            roles.put(role.name(), role.getLibelle());
        }

        Map<String, String> statuts = new HashMap<>();
        for (StatutUtilisateur statut : StatutUtilisateur.values()) {
            statuts.put(statut.name(), statut.getLibelle());
        }

        enums.put("roles", roles);
        enums.put("statuts", statuts);

        return ResponseEntity.ok(ApiResponse.success("√ânum√©rations disponibles", enums));
    }

    /**
     * Test de sant√© global
     */
    @GetMapping("/health")
    @Operation(summary = "√âtat de sant√©", description = "V√©rifie l'√©tat g√©n√©ral de l'application")
    public ResponseEntity<?> healthCheck() {
        Map<String, Object> health = new HashMap<>();

        try {
            // Test BD
            long userCount = utilisateurRepository.count();
            health.put("database", "UP");
            health.put("userCount", userCount);
        } catch (Exception e) {
            health.put("database", "DOWN");
            health.put("databaseError", e.getMessage());
        }

        // Test m√©moire
        Runtime runtime = Runtime.getRuntime();
        Map<String, Object> memory = new HashMap<>();
        memory.put("total", runtime.totalMemory());
        memory.put("free", runtime.freeMemory());
        memory.put("used", runtime.totalMemory() - runtime.freeMemory());
        health.put("memory", memory);

        // Test donn√©es de test
        health.put("testData", dataSeeder.testDataExists() ? "PR√âSENTES" : "ABSENTES");

        health.put("status", "UP");
        health.put("timestamp", java.time.LocalDateTime.now());

        return ResponseEntity.ok(ApiResponse.success("√âtat de sant√©", health));
    }

    /**
     * Test complet de l'API
     */
    @GetMapping("/full-test")
    @Operation(summary = "Test complet", description = "Lance une s√©rie de tests complets")
    public ResponseEntity<?> fullTest() {
        Map<String, Object> results = new HashMap<>();

        try {
            // Test 1: Base de donn√©es
            results.put("database", "‚úÖ OK - " + utilisateurRepository.count() + " utilisateurs");

            // Test 2: √ânum√©rations
            results.put("enums", "‚úÖ OK - " + RoleUtilisateur.values().length + " r√¥les, " +
                    StatutUtilisateur.values().length + " statuts");

            // Test 3: Donn√©es de test
            if (dataSeeder.testDataExists()) {
                results.put("testData", "‚úÖ OK - Donn√©es pr√©sentes");
            } else {
                results.put("testData", "‚ö†Ô∏è Aucune donn√©e de test");
            }

            // Test 4: M√©moire
            Runtime runtime = Runtime.getRuntime();
            long freeMemory = runtime.freeMemory() / 1024 / 1024; // MB
            results.put("memory", "‚úÖ OK - " + freeMemory + " MB libres");

            results.put("globalStatus", "‚úÖ TOUS LES TESTS PASS√âS");

        } catch (Exception e) {
            results.put("globalStatus", "‚ùå ERREUR: " + e.getMessage());
        }

        return ResponseEntity.ok(ApiResponse.success("R√©sultats du test complet", results));
    }

    /**
     * Guide de d√©marrage rapide
     */
    @GetMapping("/quick-start")
    @Operation(summary = "Guide d√©marrage", description = "Guide pour d√©marrer rapidement avec l'API")
    public ResponseEntity<?> quickStart() {
        Map<String, Object> guide = new HashMap<>();

        guide.put("step1", "‚úÖ L'API fonctionne ! Vous √™tes sur /test/quick-start");
        guide.put("step2", "üìä V√©rifiez la sant√©: GET /test/health");
        guide.put("step3", "üå± Cr√©ez des donn√©es de test: POST /test/seed-data");
        guide.put("step4", "üìñ Documentation: /swagger-ui.html");
        guide.put("step5", "üîê Testez l'auth: POST /auth/login");

        Map<String, String> endpoints = new HashMap<>();
        endpoints.put("auth", "/auth/* (login, register)");
        endpoints.put("donateurs", "/donateur/* (dashboard, profil)");
        endpoints.put("associations", "/associations/* (liste, d√©tails)");
        endpoints.put("projets", "/projets/* (liste, recherche)");
        endpoints.put("dons", "/dons/* (cr√©er, lister)");
        endpoints.put("admin", "/admin/* (gestion, stats)");
        endpoints.put("stats", "/statistiques/* (publiques, d√©taill√©es)");
        guide.put("endpoints_utiles", endpoints);

        Map<String, String> comptes = new HashMap<>();
        comptes.put("admin", "admin@mediation.com / admin123");
        comptes.put("donateur1", "mohammed.alami@email.com / donateur123");
        comptes.put("donateur2", "fatima.benali@email.com / donateur123");
        comptes.put("association1", "contact@solidarite-maroc.org / association123");
        comptes.put("association2", "contact@espoir-enfants.org / association123");
        guide.put("comptes_test", comptes);

        return ResponseEntity.ok(ApiResponse.success("Guide de d√©marrage rapide", guide));
    }
}